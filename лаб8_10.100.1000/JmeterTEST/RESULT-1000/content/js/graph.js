/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9230.0, "minX": 0.0, "maxY": 69558.0, "series": [{"data": [[0.0, 9230.0], [0.1, 9249.0], [0.2, 9387.0], [0.3, 9387.0], [0.4, 9488.0], [0.5, 9530.0], [0.6, 9581.0], [0.7, 9582.0], [0.8, 9597.0], [0.9, 9603.0], [1.0, 9607.0], [1.1, 9634.0], [1.2, 9646.0], [1.3, 9650.0], [1.4, 9650.0], [1.5, 9672.0], [1.6, 9680.0], [1.7, 9684.0], [1.8, 9687.0], [1.9, 9723.0], [2.0, 9724.0], [2.1, 9741.0], [2.2, 9752.0], [2.3, 9763.0], [2.4, 9775.0], [2.5, 9797.0], [2.6, 9805.0], [2.7, 9810.0], [2.8, 9868.0], [2.9, 9926.0], [3.0, 9959.0], [3.1, 9959.0], [3.2, 9978.0], [3.3, 9983.0], [3.4, 9993.0], [3.5, 10031.0], [3.6, 10043.0], [3.7, 10054.0], [3.8, 10079.0], [3.9, 10108.0], [4.0, 10119.0], [4.1, 10121.0], [4.2, 10148.0], [4.3, 10156.0], [4.4, 10225.0], [4.5, 10226.0], [4.6, 10228.0], [4.7, 10233.0], [4.8, 10245.0], [4.9, 10247.0], [5.0, 10263.0], [5.1, 10283.0], [5.2, 10297.0], [5.3, 10311.0], [5.4, 10345.0], [5.5, 10348.0], [5.6, 10354.0], [5.7, 10420.0], [5.8, 10434.0], [5.9, 10444.0], [6.0, 10465.0], [6.1, 10476.0], [6.2, 10505.0], [6.3, 10517.0], [6.4, 10545.0], [6.5, 10565.0], [6.6, 10578.0], [6.7, 10623.0], [6.8, 10626.0], [6.9, 10636.0], [7.0, 10643.0], [7.1, 10662.0], [7.2, 10708.0], [7.3, 10709.0], [7.4, 10738.0], [7.5, 10739.0], [7.6, 10745.0], [7.7, 10750.0], [7.8, 10756.0], [7.9, 10780.0], [8.0, 10781.0], [8.1, 10787.0], [8.2, 10792.0], [8.3, 10816.0], [8.4, 10836.0], [8.5, 10850.0], [8.6, 10864.0], [8.7, 10885.0], [8.8, 10931.0], [8.9, 10967.0], [9.0, 11006.0], [9.1, 11017.0], [9.2, 11025.0], [9.3, 11042.0], [9.4, 11072.0], [9.5, 11098.0], [9.6, 11118.0], [9.7, 11188.0], [9.8, 11235.0], [9.9, 11266.0], [10.0, 11299.0], [10.1, 11308.0], [10.2, 11317.0], [10.3, 11328.0], [10.4, 11329.0], [10.5, 11331.0], [10.6, 11379.0], [10.7, 11422.0], [10.8, 11464.0], [10.9, 11488.0], [11.0, 11505.0], [11.1, 11563.0], [11.2, 11580.0], [11.3, 11587.0], [11.4, 11635.0], [11.5, 11676.0], [11.6, 11724.0], [11.7, 11741.0], [11.8, 11752.0], [11.9, 11784.0], [12.0, 11863.0], [12.1, 11884.0], [12.2, 11885.0], [12.3, 11954.0], [12.4, 12021.0], [12.5, 12053.0], [12.6, 12069.0], [12.7, 12118.0], [12.8, 12123.0], [12.9, 12189.0], [13.0, 12200.0], [13.1, 12220.0], [13.2, 12246.0], [13.3, 12348.0], [13.4, 12394.0], [13.5, 12469.0], [13.6, 12472.0], [13.7, 12489.0], [13.8, 12505.0], [13.9, 12512.0], [14.0, 12583.0], [14.1, 12598.0], [14.2, 12616.0], [14.3, 12632.0], [14.4, 12647.0], [14.5, 12649.0], [14.6, 12651.0], [14.7, 12679.0], [14.8, 12700.0], [14.9, 12816.0], [15.0, 12906.0], [15.1, 12918.0], [15.2, 12923.0], [15.3, 12967.0], [15.4, 12997.0], [15.5, 13035.0], [15.6, 13037.0], [15.7, 13039.0], [15.8, 13064.0], [15.9, 13074.0], [16.0, 13074.0], [16.1, 13085.0], [16.2, 13097.0], [16.3, 13135.0], [16.4, 13181.0], [16.5, 13241.0], [16.6, 13259.0], [16.7, 13361.0], [16.8, 13375.0], [16.9, 13433.0], [17.0, 13545.0], [17.1, 13549.0], [17.2, 13553.0], [17.3, 13607.0], [17.4, 13652.0], [17.5, 13682.0], [17.6, 13756.0], [17.7, 13765.0], [17.8, 13770.0], [17.9, 13794.0], [18.0, 13800.0], [18.1, 13873.0], [18.2, 13910.0], [18.3, 13945.0], [18.4, 13983.0], [18.5, 14073.0], [18.6, 14076.0], [18.7, 14079.0], [18.8, 14138.0], [18.9, 14154.0], [19.0, 14231.0], [19.1, 14248.0], [19.2, 14248.0], [19.3, 14250.0], [19.4, 14289.0], [19.5, 14290.0], [19.6, 14311.0], [19.7, 14359.0], [19.8, 14451.0], [19.9, 14551.0], [20.0, 14659.0], [20.1, 14688.0], [20.2, 14764.0], [20.3, 14766.0], [20.4, 14904.0], [20.5, 14994.0], [20.6, 15007.0], [20.7, 15023.0], [20.8, 15052.0], [20.9, 15127.0], [21.0, 15136.0], [21.1, 15159.0], [21.2, 15212.0], [21.3, 15370.0], [21.4, 15390.0], [21.5, 15430.0], [21.6, 15479.0], [21.7, 15510.0], [21.8, 15590.0], [21.9, 15595.0], [22.0, 15603.0], [22.1, 15692.0], [22.2, 15731.0], [22.3, 15851.0], [22.4, 15858.0], [22.5, 15885.0], [22.6, 15903.0], [22.7, 15918.0], [22.8, 15923.0], [22.9, 15996.0], [23.0, 16026.0], [23.1, 16058.0], [23.2, 16094.0], [23.3, 16119.0], [23.4, 16186.0], [23.5, 16216.0], [23.6, 16232.0], [23.7, 16293.0], [23.8, 16319.0], [23.9, 16363.0], [24.0, 16441.0], [24.1, 16472.0], [24.2, 16488.0], [24.3, 16525.0], [24.4, 16561.0], [24.5, 16646.0], [24.6, 16690.0], [24.7, 16704.0], [24.8, 16836.0], [24.9, 16845.0], [25.0, 16876.0], [25.1, 16916.0], [25.2, 16974.0], [25.3, 17203.0], [25.4, 17264.0], [25.5, 17284.0], [25.6, 17317.0], [25.7, 17318.0], [25.8, 17341.0], [25.9, 17348.0], [26.0, 17371.0], [26.1, 17386.0], [26.2, 17568.0], [26.3, 17652.0], [26.4, 17728.0], [26.5, 17786.0], [26.6, 17832.0], [26.7, 17874.0], [26.8, 17948.0], [26.9, 17982.0], [27.0, 18001.0], [27.1, 18024.0], [27.2, 18140.0], [27.3, 18185.0], [27.4, 18190.0], [27.5, 18251.0], [27.6, 18267.0], [27.7, 18311.0], [27.8, 18333.0], [27.9, 18380.0], [28.0, 18467.0], [28.1, 18544.0], [28.2, 18597.0], [28.3, 18611.0], [28.4, 18712.0], [28.5, 18818.0], [28.6, 18829.0], [28.7, 18839.0], [28.8, 18929.0], [28.9, 19009.0], [29.0, 19016.0], [29.1, 19044.0], [29.2, 19046.0], [29.3, 19088.0], [29.4, 19107.0], [29.5, 19187.0], [29.6, 19332.0], [29.7, 19338.0], [29.8, 19357.0], [29.9, 19396.0], [30.0, 19431.0], [30.1, 19488.0], [30.2, 19529.0], [30.3, 19572.0], [30.4, 19575.0], [30.5, 19592.0], [30.6, 19599.0], [30.7, 19607.0], [30.8, 19625.0], [30.9, 19635.0], [31.0, 19736.0], [31.1, 19753.0], [31.2, 19802.0], [31.3, 19876.0], [31.4, 19920.0], [31.5, 19963.0], [31.6, 19981.0], [31.7, 19997.0], [31.8, 20055.0], [31.9, 20066.0], [32.0, 20191.0], [32.1, 20264.0], [32.2, 20305.0], [32.3, 20350.0], [32.4, 20351.0], [32.5, 20361.0], [32.6, 20373.0], [32.7, 20417.0], [32.8, 20420.0], [32.9, 20557.0], [33.0, 20576.0], [33.1, 20576.0], [33.2, 20607.0], [33.3, 20650.0], [33.4, 20687.0], [33.5, 20688.0], [33.6, 20734.0], [33.7, 20795.0], [33.8, 20838.0], [33.9, 20897.0], [34.0, 20956.0], [34.1, 21063.0], [34.2, 21078.0], [34.3, 21106.0], [34.4, 21150.0], [34.5, 21170.0], [34.6, 21251.0], [34.7, 21264.0], [34.8, 21287.0], [34.9, 21292.0], [35.0, 21320.0], [35.1, 21331.0], [35.2, 21460.0], [35.3, 21576.0], [35.4, 21654.0], [35.5, 21657.0], [35.6, 21669.0], [35.7, 21682.0], [35.8, 21740.0], [35.9, 21746.0], [36.0, 21749.0], [36.1, 21761.0], [36.2, 21766.0], [36.3, 21775.0], [36.4, 21828.0], [36.5, 21912.0], [36.6, 22031.0], [36.7, 22121.0], [36.8, 22175.0], [36.9, 22237.0], [37.0, 22239.0], [37.1, 22244.0], [37.2, 22299.0], [37.3, 22394.0], [37.4, 22432.0], [37.5, 22591.0], [37.6, 22595.0], [37.7, 22682.0], [37.8, 22690.0], [37.9, 22697.0], [38.0, 22731.0], [38.1, 22852.0], [38.2, 22861.0], [38.3, 22887.0], [38.4, 22896.0], [38.5, 22932.0], [38.6, 22953.0], [38.7, 22979.0], [38.8, 23001.0], [38.9, 23059.0], [39.0, 23062.0], [39.1, 23092.0], [39.2, 23129.0], [39.3, 23150.0], [39.4, 23205.0], [39.5, 23291.0], [39.6, 23303.0], [39.7, 23388.0], [39.8, 23440.0], [39.9, 23447.0], [40.0, 23494.0], [40.1, 23518.0], [40.2, 23555.0], [40.3, 23597.0], [40.4, 23663.0], [40.5, 23665.0], [40.6, 23684.0], [40.7, 23729.0], [40.8, 23740.0], [40.9, 23797.0], [41.0, 23833.0], [41.1, 23856.0], [41.2, 23923.0], [41.3, 23945.0], [41.4, 23967.0], [41.5, 24064.0], [41.6, 24071.0], [41.7, 24154.0], [41.8, 24184.0], [41.9, 24223.0], [42.0, 24285.0], [42.1, 24331.0], [42.2, 24335.0], [42.3, 24368.0], [42.4, 24375.0], [42.5, 24387.0], [42.6, 24388.0], [42.7, 24450.0], [42.8, 24510.0], [42.9, 24514.0], [43.0, 24514.0], [43.1, 24520.0], [43.2, 24529.0], [43.3, 24583.0], [43.4, 24628.0], [43.5, 24693.0], [43.6, 24698.0], [43.7, 24730.0], [43.8, 24826.0], [43.9, 24840.0], [44.0, 24850.0], [44.1, 24906.0], [44.2, 24945.0], [44.3, 24961.0], [44.4, 24984.0], [44.5, 24994.0], [44.6, 25102.0], [44.7, 25264.0], [44.8, 25271.0], [44.9, 25273.0], [45.0, 25336.0], [45.1, 25461.0], [45.2, 25470.0], [45.3, 25472.0], [45.4, 25661.0], [45.5, 25703.0], [45.6, 25704.0], [45.7, 25723.0], [45.8, 25794.0], [45.9, 25808.0], [46.0, 25818.0], [46.1, 25925.0], [46.2, 25928.0], [46.3, 25931.0], [46.4, 25960.0], [46.5, 26030.0], [46.6, 26117.0], [46.7, 26154.0], [46.8, 26183.0], [46.9, 26186.0], [47.0, 26268.0], [47.1, 26274.0], [47.2, 26362.0], [47.3, 26430.0], [47.4, 26505.0], [47.5, 26512.0], [47.6, 26538.0], [47.7, 26609.0], [47.8, 26642.0], [47.9, 26658.0], [48.0, 26698.0], [48.1, 26715.0], [48.2, 26740.0], [48.3, 26810.0], [48.4, 26878.0], [48.5, 26888.0], [48.6, 26967.0], [48.7, 26982.0], [48.8, 27006.0], [48.9, 27080.0], [49.0, 27082.0], [49.1, 27125.0], [49.2, 27190.0], [49.3, 27238.0], [49.4, 27291.0], [49.5, 27373.0], [49.6, 27401.0], [49.7, 27408.0], [49.8, 27427.0], [49.9, 27539.0], [50.0, 27543.0], [50.1, 27625.0], [50.2, 27630.0], [50.3, 27663.0], [50.4, 27693.0], [50.5, 27764.0], [50.6, 27778.0], [50.7, 27833.0], [50.8, 27850.0], [50.9, 27889.0], [51.0, 27945.0], [51.1, 27989.0], [51.2, 28039.0], [51.3, 28042.0], [51.4, 28100.0], [51.5, 28190.0], [51.6, 28221.0], [51.7, 28232.0], [51.8, 28233.0], [51.9, 28273.0], [52.0, 28277.0], [52.1, 28288.0], [52.2, 28378.0], [52.3, 28471.0], [52.4, 28519.0], [52.5, 28548.0], [52.6, 28582.0], [52.7, 28610.0], [52.8, 28623.0], [52.9, 28673.0], [53.0, 28679.0], [53.1, 28735.0], [53.2, 28766.0], [53.3, 28777.0], [53.4, 28838.0], [53.5, 28913.0], [53.6, 28940.0], [53.7, 28997.0], [53.8, 29025.0], [53.9, 29085.0], [54.0, 29129.0], [54.1, 29137.0], [54.2, 29142.0], [54.3, 29195.0], [54.4, 29269.0], [54.5, 29295.0], [54.6, 29446.0], [54.7, 29576.0], [54.8, 29627.0], [54.9, 29658.0], [55.0, 29703.0], [55.1, 29705.0], [55.2, 29717.0], [55.3, 29727.0], [55.4, 29772.0], [55.5, 29807.0], [55.6, 29809.0], [55.7, 29891.0], [55.8, 29904.0], [55.9, 29905.0], [56.0, 29910.0], [56.1, 29926.0], [56.2, 30073.0], [56.3, 30152.0], [56.4, 30170.0], [56.5, 30177.0], [56.6, 30201.0], [56.7, 30281.0], [56.8, 30292.0], [56.9, 30313.0], [57.0, 30331.0], [57.1, 30421.0], [57.2, 30442.0], [57.3, 30465.0], [57.4, 30495.0], [57.5, 30511.0], [57.6, 30614.0], [57.7, 30655.0], [57.8, 30727.0], [57.9, 30785.0], [58.0, 30810.0], [58.1, 30959.0], [58.2, 30984.0], [58.3, 31057.0], [58.4, 31091.0], [58.5, 31093.0], [58.6, 31096.0], [58.7, 31100.0], [58.8, 31122.0], [58.9, 31234.0], [59.0, 31296.0], [59.1, 31356.0], [59.2, 31359.0], [59.3, 31376.0], [59.4, 31397.0], [59.5, 31417.0], [59.6, 31466.0], [59.7, 31511.0], [59.8, 31599.0], [59.9, 31642.0], [60.0, 31719.0], [60.1, 31744.0], [60.2, 31913.0], [60.3, 31916.0], [60.4, 32023.0], [60.5, 32046.0], [60.6, 32078.0], [60.7, 32102.0], [60.8, 32106.0], [60.9, 32127.0], [61.0, 32150.0], [61.1, 32159.0], [61.2, 32213.0], [61.3, 32251.0], [61.4, 32331.0], [61.5, 32444.0], [61.6, 32619.0], [61.7, 32633.0], [61.8, 32646.0], [61.9, 32652.0], [62.0, 32699.0], [62.1, 32714.0], [62.2, 32722.0], [62.3, 32725.0], [62.4, 32746.0], [62.5, 32880.0], [62.6, 32932.0], [62.7, 32945.0], [62.8, 33016.0], [62.9, 33033.0], [63.0, 33044.0], [63.1, 33082.0], [63.2, 33258.0], [63.3, 33326.0], [63.4, 33376.0], [63.5, 33416.0], [63.6, 33419.0], [63.7, 33426.0], [63.8, 33468.0], [63.9, 33510.0], [64.0, 33582.0], [64.1, 33588.0], [64.2, 33677.0], [64.3, 33767.0], [64.4, 33898.0], [64.5, 33946.0], [64.6, 34020.0], [64.7, 34045.0], [64.8, 34076.0], [64.9, 34101.0], [65.0, 34110.0], [65.1, 34119.0], [65.2, 34138.0], [65.3, 34160.0], [65.4, 34162.0], [65.5, 34437.0], [65.6, 34460.0], [65.7, 34503.0], [65.8, 34510.0], [65.9, 34514.0], [66.0, 34520.0], [66.1, 34623.0], [66.2, 34636.0], [66.3, 34648.0], [66.4, 34660.0], [66.5, 34664.0], [66.6, 34757.0], [66.7, 34795.0], [66.8, 34804.0], [66.9, 34810.0], [67.0, 34843.0], [67.1, 34857.0], [67.2, 34919.0], [67.3, 35010.0], [67.4, 35042.0], [67.5, 35053.0], [67.6, 35227.0], [67.7, 35229.0], [67.8, 35260.0], [67.9, 35307.0], [68.0, 35327.0], [68.1, 35330.0], [68.2, 35331.0], [68.3, 35415.0], [68.4, 35448.0], [68.5, 35458.0], [68.6, 35590.0], [68.7, 35812.0], [68.8, 35838.0], [68.9, 35850.0], [69.0, 35868.0], [69.1, 35937.0], [69.2, 35989.0], [69.3, 36053.0], [69.4, 36086.0], [69.5, 36092.0], [69.6, 36107.0], [69.7, 36123.0], [69.8, 36217.0], [69.9, 36223.0], [70.0, 36278.0], [70.1, 36304.0], [70.2, 36319.0], [70.3, 36327.0], [70.4, 36368.0], [70.5, 36370.0], [70.6, 36533.0], [70.7, 36582.0], [70.8, 36762.0], [70.9, 36797.0], [71.0, 36817.0], [71.1, 36838.0], [71.2, 36850.0], [71.3, 36857.0], [71.4, 37315.0], [71.5, 37349.0], [71.6, 37465.0], [71.7, 38906.0], [71.8, 38977.0], [71.9, 39008.0], [72.0, 39045.0], [72.1, 39053.0], [72.2, 39095.0], [72.3, 39182.0], [72.4, 39200.0], [72.5, 39295.0], [72.6, 39308.0], [72.7, 39422.0], [72.8, 39495.0], [72.9, 39507.0], [73.0, 39507.0], [73.1, 39551.0], [73.2, 39604.0], [73.3, 39658.0], [73.4, 39735.0], [73.5, 39755.0], [73.6, 39853.0], [73.7, 39944.0], [73.8, 40017.0], [73.9, 40052.0], [74.0, 40063.0], [74.1, 40064.0], [74.2, 40104.0], [74.3, 40188.0], [74.4, 40226.0], [74.5, 40252.0], [74.6, 40252.0], [74.7, 40280.0], [74.8, 40334.0], [74.9, 40419.0], [75.0, 40431.0], [75.1, 40510.0], [75.2, 40582.0], [75.3, 40660.0], [75.4, 40691.0], [75.5, 40714.0], [75.6, 40779.0], [75.7, 40820.0], [75.8, 40822.0], [75.9, 40851.0], [76.0, 40984.0], [76.1, 41066.0], [76.2, 41084.0], [76.3, 41172.0], [76.4, 41215.0], [76.5, 41221.0], [76.6, 41225.0], [76.7, 41252.0], [76.8, 41274.0], [76.9, 41364.0], [77.0, 41573.0], [77.1, 41618.0], [77.2, 41656.0], [77.3, 41669.0], [77.4, 41683.0], [77.5, 41723.0], [77.6, 41808.0], [77.7, 41977.0], [77.8, 42016.0], [77.9, 42028.0], [78.0, 42034.0], [78.1, 42051.0], [78.2, 42052.0], [78.3, 42118.0], [78.4, 42129.0], [78.5, 42204.0], [78.6, 42239.0], [78.7, 42247.0], [78.8, 42284.0], [78.9, 42309.0], [79.0, 42328.0], [79.1, 42380.0], [79.2, 42388.0], [79.3, 42397.0], [79.4, 42544.0], [79.5, 42625.0], [79.6, 42653.0], [79.7, 42714.0], [79.8, 42765.0], [79.9, 42782.0], [80.0, 42812.0], [80.1, 42814.0], [80.2, 42879.0], [80.3, 42904.0], [80.4, 42913.0], [80.5, 42975.0], [80.6, 43023.0], [80.7, 43082.0], [80.8, 43093.0], [80.9, 43178.0], [81.0, 43271.0], [81.1, 43272.0], [81.2, 43366.0], [81.3, 43417.0], [81.4, 43442.0], [81.5, 43509.0], [81.6, 43532.0], [81.7, 43534.0], [81.8, 43551.0], [81.9, 43622.0], [82.0, 43715.0], [82.1, 43779.0], [82.2, 43782.0], [82.3, 44015.0], [82.4, 44044.0], [82.5, 44099.0], [82.6, 44105.0], [82.7, 44126.0], [82.8, 44131.0], [82.9, 44135.0], [83.0, 44255.0], [83.1, 44263.0], [83.2, 44285.0], [83.3, 44287.0], [83.4, 44340.0], [83.5, 44492.0], [83.6, 44493.0], [83.7, 44587.0], [83.8, 44604.0], [83.9, 44632.0], [84.0, 44639.0], [84.1, 44719.0], [84.2, 44724.0], [84.3, 44779.0], [84.4, 44864.0], [84.5, 44868.0], [84.6, 45004.0], [84.7, 45063.0], [84.8, 45082.0], [84.9, 45124.0], [85.0, 45193.0], [85.1, 45237.0], [85.2, 45242.0], [85.3, 45245.0], [85.4, 45269.0], [85.5, 45297.0], [85.6, 45310.0], [85.7, 45451.0], [85.8, 45483.0], [85.9, 45574.0], [86.0, 45595.0], [86.1, 45637.0], [86.2, 45677.0], [86.3, 45704.0], [86.4, 45721.0], [86.5, 45783.0], [86.6, 45864.0], [86.7, 45913.0], [86.8, 45951.0], [86.9, 45977.0], [87.0, 46051.0], [87.1, 46061.0], [87.2, 46096.0], [87.3, 46113.0], [87.4, 46140.0], [87.5, 46152.0], [87.6, 46174.0], [87.7, 46306.0], [87.8, 46325.0], [87.9, 46369.0], [88.0, 46441.0], [88.1, 46463.0], [88.2, 46480.0], [88.3, 46519.0], [88.4, 46544.0], [88.5, 46557.0], [88.6, 46596.0], [88.7, 46622.0], [88.8, 46653.0], [88.9, 46711.0], [89.0, 46713.0], [89.1, 46778.0], [89.2, 46802.0], [89.3, 46902.0], [89.4, 46942.0], [89.5, 46965.0], [89.6, 46967.0], [89.7, 46999.0], [89.8, 47050.0], [89.9, 47093.0], [90.0, 47132.0], [90.1, 47210.0], [90.2, 47216.0], [90.3, 47231.0], [90.4, 47253.0], [90.5, 47336.0], [90.6, 47386.0], [90.7, 47391.0], [90.8, 47396.0], [90.9, 47465.0], [91.0, 47513.0], [91.1, 47534.0], [91.2, 47553.0], [91.3, 47605.0], [91.4, 47705.0], [91.5, 47717.0], [91.6, 47726.0], [91.7, 47748.0], [91.8, 47756.0], [91.9, 47863.0], [92.0, 47891.0], [92.1, 47999.0], [92.2, 48173.0], [92.3, 48174.0], [92.4, 48187.0], [92.5, 48204.0], [92.6, 48240.0], [92.7, 48267.0], [92.8, 48280.0], [92.9, 48325.0], [93.0, 48351.0], [93.1, 48362.0], [93.2, 48382.0], [93.3, 48418.0], [93.4, 48434.0], [93.5, 48437.0], [93.6, 48512.0], [93.7, 48537.0], [93.8, 48638.0], [93.9, 48658.0], [94.0, 48704.0], [94.1, 48726.0], [94.2, 48760.0], [94.3, 48764.0], [94.4, 48818.0], [94.5, 48888.0], [94.6, 48908.0], [94.7, 48928.0], [94.8, 49091.0], [94.9, 49166.0], [95.0, 49225.0], [95.1, 49255.0], [95.2, 49270.0], [95.3, 49273.0], [95.4, 49314.0], [95.5, 49381.0], [95.6, 49405.0], [95.7, 49436.0], [95.8, 49483.0], [95.9, 49523.0], [96.0, 49639.0], [96.1, 49674.0], [96.2, 49687.0], [96.3, 49688.0], [96.4, 49718.0], [96.5, 49788.0], [96.6, 49808.0], [96.7, 49812.0], [96.8, 49868.0], [96.9, 49883.0], [97.0, 49901.0], [97.1, 49915.0], [97.2, 49919.0], [97.3, 49947.0], [97.4, 50129.0], [97.5, 50132.0], [97.6, 50373.0], [97.7, 68431.0], [97.8, 68621.0], [97.9, 68864.0], [98.0, 68956.0], [98.1, 69099.0], [98.2, 69136.0], [98.3, 69139.0], [98.4, 69139.0], [98.5, 69171.0], [98.6, 69180.0], [98.7, 69229.0], [98.8, 69327.0], [98.9, 69417.0], [99.0, 69443.0], [99.1, 69446.0], [99.2, 69464.0], [99.3, 69486.0], [99.4, 69486.0], [99.5, 69505.0], [99.6, 69510.0], [99.7, 69530.0], [99.8, 69542.0], [99.9, 69558.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 9200.0, "maxY": 11.0, "series": [{"data": [[69100.0, 5.0], [32900.0, 2.0], [33300.0, 2.0], [33700.0, 1.0], [34100.0, 6.0], [34500.0, 4.0], [34900.0, 1.0], [35300.0, 4.0], [36100.0, 2.0], [36500.0, 2.0], [37300.0, 2.0], [38900.0, 2.0], [39300.0, 1.0], [39700.0, 2.0], [40100.0, 2.0], [40500.0, 2.0], [40900.0, 1.0], [41300.0, 1.0], [41700.0, 1.0], [42100.0, 2.0], [42500.0, 1.0], [42900.0, 3.0], [43300.0, 1.0], [43700.0, 3.0], [44100.0, 4.0], [44500.0, 1.0], [45300.0, 1.0], [45700.0, 3.0], [46100.0, 4.0], [46500.0, 4.0], [46900.0, 5.0], [47300.0, 4.0], [47700.0, 5.0], [48100.0, 3.0], [48500.0, 2.0], [48900.0, 2.0], [49300.0, 2.0], [49700.0, 2.0], [50100.0, 2.0], [69000.0, 1.0], [68900.0, 1.0], [9200.0, 2.0], [9700.0, 7.0], [9600.0, 9.0], [9500.0, 4.0], [9400.0, 2.0], [9300.0, 1.0], [9800.0, 3.0], [9900.0, 6.0], [10000.0, 4.0], [10100.0, 5.0], [10200.0, 10.0], [10300.0, 4.0], [10400.0, 5.0], [10500.0, 5.0], [10600.0, 5.0], [10700.0, 11.0], [10800.0, 5.0], [10900.0, 2.0], [11000.0, 6.0], [11200.0, 3.0], [11100.0, 2.0], [11300.0, 6.0], [11400.0, 3.0], [11500.0, 4.0], [11600.0, 2.0], [11700.0, 4.0], [11800.0, 3.0], [12000.0, 3.0], [12200.0, 3.0], [12100.0, 3.0], [11900.0, 1.0], [12300.0, 2.0], [12400.0, 3.0], [12500.0, 4.0], [12600.0, 6.0], [12700.0, 1.0], [12900.0, 5.0], [13000.0, 8.0], [13100.0, 2.0], [12800.0, 1.0], [13200.0, 2.0], [13300.0, 2.0], [13700.0, 4.0], [13500.0, 3.0], [13400.0, 1.0], [13600.0, 3.0], [13800.0, 2.0], [13900.0, 3.0], [14100.0, 2.0], [14000.0, 3.0], [14200.0, 5.0], [14300.0, 2.0], [14400.0, 1.0], [14600.0, 2.0], [14500.0, 1.0], [14700.0, 2.0], [15100.0, 3.0], [15000.0, 3.0], [14900.0, 2.0], [15300.0, 2.0], [15200.0, 1.0], [15400.0, 2.0], [15500.0, 3.0], [15600.0, 2.0], [15700.0, 1.0], [15800.0, 3.0], [15900.0, 4.0], [16000.0, 3.0], [16100.0, 2.0], [16200.0, 3.0], [16300.0, 2.0], [16400.0, 3.0], [16600.0, 2.0], [16800.0, 3.0], [17200.0, 3.0], [17600.0, 1.0], [17800.0, 2.0], [18000.0, 2.0], [18400.0, 1.0], [18200.0, 2.0], [18600.0, 1.0], [18800.0, 3.0], [19000.0, 5.0], [19400.0, 2.0], [19600.0, 3.0], [20000.0, 2.0], [19800.0, 2.0], [20200.0, 1.0], [20400.0, 2.0], [20600.0, 4.0], [20800.0, 2.0], [21000.0, 2.0], [21200.0, 4.0], [21400.0, 1.0], [22400.0, 1.0], [21600.0, 4.0], [22000.0, 1.0], [21800.0, 1.0], [22200.0, 4.0], [22600.0, 3.0], [22800.0, 4.0], [23000.0, 4.0], [23400.0, 3.0], [23200.0, 2.0], [23800.0, 2.0], [23600.0, 3.0], [24000.0, 2.0], [24200.0, 2.0], [24400.0, 1.0], [24800.0, 3.0], [24600.0, 3.0], [25200.0, 3.0], [25400.0, 3.0], [25800.0, 2.0], [26400.0, 1.0], [25600.0, 1.0], [26200.0, 2.0], [26000.0, 1.0], [26600.0, 4.0], [27400.0, 3.0], [26800.0, 3.0], [27000.0, 3.0], [27200.0, 2.0], [27600.0, 4.0], [27800.0, 3.0], [28000.0, 2.0], [28200.0, 6.0], [28400.0, 1.0], [28600.0, 4.0], [29000.0, 2.0], [28800.0, 1.0], [29400.0, 1.0], [29200.0, 2.0], [29600.0, 2.0], [29800.0, 3.0], [30000.0, 1.0], [30200.0, 3.0], [30400.0, 4.0], [30600.0, 2.0], [30800.0, 1.0], [31000.0, 4.0], [31200.0, 2.0], [31400.0, 2.0], [31600.0, 1.0], [32000.0, 3.0], [32200.0, 2.0], [32400.0, 1.0], [32600.0, 5.0], [32800.0, 1.0], [33200.0, 1.0], [34000.0, 3.0], [33600.0, 1.0], [34400.0, 2.0], [34800.0, 4.0], [35200.0, 3.0], [36000.0, 3.0], [36800.0, 4.0], [39200.0, 2.0], [39600.0, 2.0], [40000.0, 4.0], [40400.0, 2.0], [40800.0, 4.0], [41200.0, 5.0], [41600.0, 4.0], [42000.0, 5.0], [42800.0, 3.0], [43200.0, 2.0], [43600.0, 1.0], [44000.0, 3.0], [44400.0, 2.0], [44800.0, 2.0], [45200.0, 5.0], [45600.0, 2.0], [46000.0, 3.0], [46400.0, 3.0], [46800.0, 1.0], [47200.0, 4.0], [47600.0, 1.0], [48400.0, 3.0], [48800.0, 2.0], [49200.0, 4.0], [49600.0, 4.0], [68800.0, 1.0], [69500.0, 5.0], [33500.0, 3.0], [33900.0, 1.0], [34700.0, 2.0], [35500.0, 1.0], [35900.0, 2.0], [36300.0, 5.0], [36700.0, 2.0], [39100.0, 1.0], [39500.0, 3.0], [39900.0, 1.0], [40300.0, 1.0], [40700.0, 2.0], [41100.0, 1.0], [41500.0, 1.0], [42300.0, 5.0], [41900.0, 1.0], [42700.0, 3.0], [43500.0, 4.0], [43100.0, 1.0], [44300.0, 1.0], [44700.0, 3.0], [45100.0, 2.0], [45500.0, 2.0], [45900.0, 3.0], [46300.0, 3.0], [46700.0, 3.0], [47100.0, 1.0], [47500.0, 3.0], [47900.0, 1.0], [48300.0, 4.0], [48700.0, 4.0], [49100.0, 1.0], [49500.0, 1.0], [49900.0, 4.0], [50300.0, 1.0], [68600.0, 1.0], [69400.0, 6.0], [69300.0, 1.0], [16500.0, 2.0], [16700.0, 1.0], [16900.0, 2.0], [17300.0, 6.0], [17500.0, 1.0], [17900.0, 2.0], [17700.0, 2.0], [18100.0, 3.0], [18300.0, 3.0], [18500.0, 2.0], [18700.0, 1.0], [19100.0, 2.0], [18900.0, 1.0], [19300.0, 4.0], [20300.0, 5.0], [19500.0, 5.0], [19700.0, 2.0], [19900.0, 4.0], [20100.0, 1.0], [21300.0, 2.0], [20700.0, 2.0], [20500.0, 3.0], [21100.0, 3.0], [20900.0, 1.0], [21500.0, 1.0], [21700.0, 6.0], [22300.0, 1.0], [21900.0, 1.0], [22100.0, 2.0], [22500.0, 2.0], [23300.0, 2.0], [22700.0, 1.0], [22900.0, 3.0], [23100.0, 2.0], [23500.0, 3.0], [23700.0, 3.0], [23900.0, 3.0], [24100.0, 2.0], [24300.0, 6.0], [24500.0, 6.0], [24700.0, 1.0], [24900.0, 5.0], [25300.0, 1.0], [25100.0, 1.0], [25700.0, 4.0], [25900.0, 4.0], [26300.0, 1.0], [26100.0, 4.0], [26500.0, 3.0], [26700.0, 2.0], [26900.0, 2.0], [27100.0, 2.0], [27300.0, 1.0], [27500.0, 2.0], [27700.0, 2.0], [27900.0, 2.0], [28100.0, 2.0], [28300.0, 1.0], [28500.0, 3.0], [28700.0, 3.0], [28900.0, 3.0], [29100.0, 4.0], [29500.0, 1.0], [29700.0, 5.0], [29900.0, 4.0], [30100.0, 3.0], [30300.0, 2.0], [30500.0, 1.0], [30700.0, 2.0], [30900.0, 2.0], [31100.0, 2.0], [31300.0, 4.0], [31500.0, 2.0], [31700.0, 2.0], [31900.0, 2.0], [32100.0, 5.0], [32300.0, 1.0], [32700.0, 4.0], [33000.0, 4.0], [33400.0, 4.0], [33800.0, 1.0], [34600.0, 5.0], [35000.0, 3.0], [35400.0, 3.0], [35800.0, 4.0], [36200.0, 3.0], [37400.0, 1.0], [39000.0, 4.0], [39400.0, 2.0], [39800.0, 1.0], [40200.0, 4.0], [40600.0, 2.0], [41000.0, 2.0], [41800.0, 1.0], [42200.0, 4.0], [42600.0, 2.0], [43000.0, 3.0], [43400.0, 2.0], [44200.0, 4.0], [44600.0, 3.0], [45000.0, 3.0], [45400.0, 2.0], [45800.0, 1.0], [46600.0, 2.0], [47000.0, 2.0], [47400.0, 1.0], [47800.0, 2.0], [48200.0, 4.0], [48600.0, 2.0], [49000.0, 1.0], [49400.0, 3.0], [49800.0, 4.0], [68400.0, 1.0], [69200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 69500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 23.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 977.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 977.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 23.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 447.58836689038077, "minX": 1.70326482E12, "maxY": 955.6981132075475, "series": [{"data": [[1.70326488E12, 447.58836689038077], [1.70326482E12, 955.6981132075475]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70326488E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9780.333333333334, "minX": 3.0, "maxY": 69514.0, "series": [{"data": [[3.0, 69399.66666666667], [6.0, 69068.0], [7.0, 69508.0], [8.0, 69327.0], [10.0, 69514.0], [12.0, 69281.5], [14.0, 69340.5], [15.0, 69229.0], [17.0, 69291.0], [18.0, 69446.0], [19.0, 69139.0], [21.0, 69140.5], [22.0, 68621.0], [23.0, 68431.0], [24.0, 50373.0], [25.0, 49915.0], [26.0, 50132.0], [27.0, 49919.0], [28.0, 49947.0], [29.0, 49883.0], [30.0, 50129.0], [31.0, 49688.0], [33.0, 49405.0], [32.0, 49718.0], [35.0, 49639.0], [34.0, 49901.0], [37.0, 49771.0], [38.0, 49273.0], [41.0, 49812.0], [40.0, 49798.0], [42.0, 49687.0], [45.0, 49523.0], [44.0, 49398.5], [47.0, 49255.0], [46.0, 49270.0], [49.0, 49436.0], [48.0, 49381.0], [51.0, 49225.0], [50.0, 49166.0], [53.0, 48925.5], [55.0, 48638.0], [54.0, 48818.0], [57.0, 48537.0], [56.0, 48928.0], [59.0, 48764.0], [58.0, 48908.0], [61.0, 48362.0], [60.0, 48888.0], [63.0, 48382.0], [62.0, 48267.0], [67.0, 48280.0], [66.0, 48704.0], [65.0, 48437.0], [64.0, 48726.0], [71.0, 48173.0], [70.0, 48351.0], [69.0, 48325.0], [68.0, 48658.0], [75.0, 48418.0], [74.0, 48174.0], [73.0, 48434.0], [72.0, 48512.0], [79.0, 47891.0], [78.0, 48204.0], [77.0, 47999.0], [76.0, 47748.0], [83.0, 47726.0], [82.0, 47756.0], [81.0, 48187.0], [80.0, 48240.0], [87.0, 47553.0], [86.0, 47863.0], [85.0, 47605.0], [84.0, 47717.0], [91.0, 47465.0], [90.0, 47396.0], [89.0, 47513.0], [88.0, 47534.0], [95.0, 47210.0], [94.0, 47391.0], [93.0, 47386.0], [92.0, 47705.0], [99.0, 47093.0], [98.0, 47132.0], [97.0, 47336.0], [96.0, 47216.0], [103.0, 46902.0], [102.0, 47242.0], [100.0, 46967.0], [107.0, 46802.0], [106.0, 46778.0], [105.0, 47050.0], [104.0, 46965.0], [111.0, 46653.0], [110.0, 46999.0], [109.0, 46942.0], [108.0, 46519.0], [115.0, 46596.0], [114.0, 46325.0], [113.0, 46713.0], [112.0, 46711.0], [119.0, 46557.0], [118.0, 46544.0], [117.0, 46622.0], [116.0, 46441.0], [123.0, 46113.0], [122.0, 46196.5], [120.0, 46463.0], [127.0, 46306.0], [126.0, 46051.0], [125.0, 46096.0], [124.0, 46369.0], [135.0, 45783.0], [134.0, 45977.0], [133.0, 45864.0], [132.0, 46061.0], [131.0, 46152.0], [130.0, 46174.0], [129.0, 45951.0], [128.0, 46140.0], [143.0, 45193.0], [142.0, 45595.0], [141.0, 45677.0], [140.0, 45297.0], [139.0, 45451.0], [138.0, 45704.0], [137.0, 45721.0], [136.0, 45637.0], [151.0, 45269.0], [150.0, 45004.0], [149.0, 45242.0], [148.0, 45124.0], [147.0, 45483.0], [146.0, 45245.0], [145.0, 45310.0], [144.0, 45574.0], [159.0, 44587.0], [158.0, 45063.0], [157.0, 44721.5], [155.0, 44779.0], [154.0, 44632.0], [153.0, 45082.0], [152.0, 45237.0], [167.0, 44099.0], [166.0, 44493.0], [165.0, 44604.0], [164.0, 44044.0], [163.0, 44492.0], [162.0, 44639.0], [161.0, 44864.0], [160.0, 44868.0], [175.0, 44131.0], [174.0, 44270.0], [172.0, 44126.0], [171.0, 44340.0], [170.0, 44015.0], [169.0, 44287.0], [168.0, 44263.0], [183.0, 43532.0], [182.0, 43782.0], [181.0, 43622.0], [180.0, 43442.0], [179.0, 44105.0], [178.0, 44135.0], [177.0, 43715.0], [176.0, 43534.0], [191.0, 43082.0], [190.0, 43530.0], [188.0, 43271.0], [187.0, 43272.0], [186.0, 43417.0], [185.0, 43478.5], [199.0, 42765.0], [198.0, 43093.0], [197.0, 42814.0], [196.0, 42902.5], [194.0, 42904.0], [193.0, 42975.0], [192.0, 43366.0], [207.0, 42284.0], [206.0, 42328.0], [205.0, 42653.0], [204.0, 42714.0], [203.0, 42544.0], [202.0, 42812.0], [201.0, 42896.0], [215.0, 42380.0], [214.0, 42397.0], [213.0, 42204.0], [212.0, 42388.0], [211.0, 41977.0], [210.0, 42625.0], [209.0, 42239.0], [208.0, 42309.0], [223.0, 42034.0], [221.0, 41848.5], [219.0, 42051.0], [218.0, 42129.0], [217.0, 42118.0], [216.0, 42247.0], [231.0, 41225.0], [230.0, 41618.0], [229.0, 41066.0], [228.0, 41683.0], [227.0, 41723.0], [226.0, 41808.0], [225.0, 41656.0], [224.0, 42034.0], [239.0, 41252.0], [238.0, 41221.0], [237.0, 41364.0], [236.0, 41084.0], [235.0, 40851.0], [234.0, 41215.0], [233.0, 41172.0], [232.0, 41573.0], [247.0, 40691.0], [246.0, 40820.0], [245.0, 40334.0], [244.0, 40714.0], [243.0, 40779.0], [242.0, 40822.0], [241.0, 40984.0], [240.0, 41274.0], [255.0, 40252.0], [254.0, 40419.0], [253.0, 40582.0], [252.0, 40280.0], [251.0, 40660.0], [250.0, 40188.0], [249.0, 40510.0], [248.0, 40818.0], [270.0, 39422.0], [271.0, 39604.0], [269.0, 39755.0], [268.0, 39507.0], [267.0, 39853.0], [266.0, 40017.0], [265.0, 40063.0], [264.0, 39495.0], [263.0, 39735.0], [257.0, 40104.0], [256.0, 40431.0], [259.0, 39944.0], [258.0, 40064.0], [262.0, 40226.0], [261.0, 40052.0], [260.0, 40252.0], [286.0, 37315.0], [287.0, 37349.0], [285.0, 37465.0], [284.0, 39053.0], [283.0, 39200.0], [282.0, 39095.0], [281.0, 38906.0], [280.0, 39142.5], [278.0, 39008.0], [272.0, 39507.0], [275.0, 39295.0], [274.0, 39351.5], [277.0, 39182.0], [276.0, 39551.0], [302.0, 36278.0], [303.0, 36086.0], [301.0, 36327.0], [300.0, 36582.0], [299.0, 36370.0], [298.0, 36368.0], [297.0, 36762.0], [296.0, 36217.0], [295.0, 36797.0], [289.0, 36319.0], [288.0, 36850.0], [291.0, 36857.0], [290.0, 36304.0], [294.0, 36827.5], [292.0, 36533.0], [317.0, 35307.0], [318.0, 35330.0], [316.0, 35458.0], [307.0, 35989.0], [306.0, 36223.0], [305.0, 36123.0], [304.0, 36092.0], [315.0, 35850.0], [314.0, 35331.0], [313.0, 35937.0], [312.0, 35853.0], [310.0, 36053.0], [309.0, 35812.0], [308.0, 36107.0], [332.0, 34810.0], [334.0, 35042.0], [335.0, 34623.0], [333.0, 34510.0], [331.0, 34860.0], [328.0, 35229.0], [327.0, 34648.0], [321.0, 35590.0], [320.0, 35250.5], [323.0, 35010.0], [322.0, 35415.0], [326.0, 35260.0], [325.0, 35227.0], [324.0, 35327.0], [350.0, 33677.0], [351.0, 34119.0], [349.0, 34110.0], [348.0, 34076.0], [347.0, 34138.0], [346.0, 34437.0], [345.0, 34503.0], [344.0, 34664.0], [343.0, 34660.0], [337.0, 34636.0], [336.0, 34520.0], [339.0, 34843.0], [338.0, 34514.0], [342.0, 34757.0], [341.0, 34627.5], [366.0, 33326.0], [367.0, 33510.0], [365.0, 33258.0], [364.0, 33426.0], [363.0, 33468.0], [362.0, 33419.0], [361.0, 33767.0], [360.0, 33898.0], [359.0, 33946.0], [353.0, 34102.5], [355.0, 33588.0], [354.0, 34162.0], [358.0, 33582.0], [357.0, 34020.0], [356.0, 34101.0], [382.0, 32213.0], [383.0, 32699.0], [381.0, 32652.0], [380.0, 32932.0], [379.0, 32945.0], [378.0, 32646.0], [377.0, 32725.0], [376.0, 32714.0], [375.0, 33016.0], [369.0, 33416.0], [368.0, 33082.0], [371.0, 33376.0], [370.0, 33033.0], [374.0, 32746.0], [373.0, 32880.0], [372.0, 33044.0], [398.0, 32078.0], [399.0, 31642.0], [397.0, 31744.0], [396.0, 32102.0], [395.0, 32023.0], [394.0, 32046.0], [393.0, 32229.0], [391.0, 32106.0], [385.0, 32722.0], [384.0, 32150.0], [387.0, 32633.0], [386.0, 32619.0], [390.0, 32159.0], [389.0, 32251.0], [388.0, 32444.0], [413.0, 31091.0], [415.0, 30892.0], [412.0, 31356.0], [403.0, 31599.0], [402.0, 31719.0], [401.0, 31916.0], [400.0, 31913.0], [411.0, 31296.0], [410.0, 31096.0], [409.0, 31511.0], [408.0, 31359.0], [407.0, 31397.0], [406.0, 31466.0], [405.0, 31376.0], [404.0, 31417.0], [430.0, 30562.5], [431.0, 30177.0], [428.0, 30421.0], [419.0, 31093.0], [418.0, 31122.0], [417.0, 31234.0], [416.0, 31100.0], [427.0, 30442.0], [426.0, 30201.0], [425.0, 30655.0], [424.0, 30313.0], [423.0, 30959.0], [422.0, 30785.0], [421.0, 30810.0], [420.0, 30984.0], [446.0, 29727.0], [447.0, 29891.0], [445.0, 29717.0], [444.0, 30073.0], [443.0, 29807.0], [442.0, 29905.0], [441.0, 30152.0], [440.0, 30170.0], [439.0, 29904.0], [433.0, 30465.0], [432.0, 30495.0], [435.0, 30331.0], [434.0, 30281.0], [438.0, 29910.0], [437.0, 30292.0], [436.0, 29703.0], [462.0, 29142.0], [463.0, 28838.0], [461.0, 29195.0], [460.0, 28940.0], [459.0, 29129.0], [458.0, 29137.0], [457.0, 29446.0], [456.0, 29269.0], [455.0, 29461.0], [449.0, 29772.0], [448.0, 29926.0], [451.0, 29705.0], [450.0, 29809.0], [453.0, 29576.0], [452.0, 29658.0], [478.0, 28233.0], [479.0, 28273.0], [477.0, 28673.0], [476.0, 28679.0], [475.0, 28766.0], [474.0, 28777.0], [473.0, 28548.0], [472.0, 28735.0], [471.0, 28550.5], [465.0, 28997.0], [464.0, 29085.0], [467.0, 28610.0], [466.0, 29025.0], [469.0, 28913.0], [468.0, 28623.0], [494.0, 27989.0], [495.0, 27945.0], [493.0, 27889.0], [492.0, 28042.0], [491.0, 27764.0], [490.0, 27841.5], [488.0, 28232.0], [487.0, 28221.0], [480.0, 28288.0], [482.0, 28378.0], [481.0, 28471.0], [486.0, 28190.0], [485.0, 28039.0], [484.0, 28188.5], [510.0, 26740.0], [511.0, 27238.0], [509.0, 27373.0], [508.0, 27408.0], [507.0, 27291.0], [506.0, 26888.0], [505.0, 27539.0], [504.0, 27006.0], [503.0, 27543.0], [497.0, 27427.0], [496.0, 27625.0], [499.0, 27401.0], [498.0, 27778.0], [502.0, 27630.0], [501.0, 27693.0], [500.0, 27663.0], [538.0, 25928.0], [542.0, 25723.0], [543.0, 25925.0], [528.0, 26609.0], [530.0, 26183.0], [529.0, 26154.0], [532.0, 26505.0], [531.0, 26186.0], [541.0, 25960.0], [540.0, 25818.0], [539.0, 25704.0], [537.0, 26107.333333333332], [519.0, 26658.0], [518.0, 26967.0], [517.0, 27080.0], [516.0, 26982.0], [515.0, 27082.0], [514.0, 26878.0], [513.0, 27190.0], [512.0, 27125.0], [527.0, 26512.0], [526.0, 26642.0], [525.0, 26362.0], [524.0, 26715.0], [523.0, 26430.0], [522.0, 26754.0], [520.0, 26538.0], [534.0, 26268.0], [533.0, 26030.0], [570.0, 24450.0], [574.0, 24071.0], [575.0, 24331.0], [561.0, 24945.0], [560.0, 24994.0], [563.0, 24840.0], [562.0, 24583.0], [565.0, 24961.0], [564.0, 24698.0], [573.0, 24375.0], [572.0, 24730.0], [571.0, 24510.0], [569.0, 24682.0], [551.0, 25470.0], [550.0, 25703.0], [549.0, 25794.0], [548.0, 25808.0], [547.0, 25561.0], [545.0, 25272.0], [559.0, 24906.0], [558.0, 24693.0], [557.0, 25264.0], [556.0, 25336.0], [555.0, 24826.0], [554.0, 25472.0], [553.0, 25102.0], [552.0, 24984.0], [567.0, 24628.0], [566.0, 24520.0], [601.0, 23471.5], [606.0, 23470.5], [607.0, 23062.0], [592.0, 23797.0], [594.0, 23684.0], [593.0, 23729.0], [604.0, 23291.0], [603.0, 23518.0], [602.0, 22953.0], [591.0, 23597.0], [577.0, 24529.0], [576.0, 24387.0], [579.0, 24388.0], [578.0, 24514.0], [581.0, 23967.0], [580.0, 24223.0], [583.0, 24368.0], [582.0, 24335.0], [590.0, 23856.0], [589.0, 24064.0], [588.0, 23945.0], [587.0, 24154.0], [586.0, 24184.0], [585.0, 23833.0], [584.0, 24285.0], [599.0, 23665.0], [598.0, 23472.5], [596.0, 23663.0], [595.0, 23923.0], [637.0, 21899.333333333332], [628.0, 22239.0], [638.0, 22031.0], [625.0, 22394.0], [624.0, 22697.0], [627.0, 22595.0], [626.0, 22682.0], [634.0, 21766.0], [633.0, 22244.0], [632.0, 22175.0], [615.0, 22887.0], [614.0, 22932.0], [613.0, 23092.0], [612.0, 22690.0], [611.0, 23150.0], [610.0, 23303.0], [609.0, 23129.0], [608.0, 23440.0], [623.0, 22731.0], [622.0, 22896.0], [621.0, 22852.0], [620.0, 22591.0], [619.0, 23001.0], [618.0, 22861.0], [617.0, 22979.0], [616.0, 23059.0], [631.0, 22432.0], [630.0, 22299.0], [629.0, 22237.0], [669.0, 20557.0], [660.0, 20956.0], [670.0, 20350.0], [657.0, 21320.0], [656.0, 21231.0], [659.0, 21063.0], [658.0, 21287.0], [668.0, 20576.0], [667.0, 20513.5], [665.0, 20763.0], [647.0, 21078.0], [646.0, 21746.0], [645.0, 21740.0], [644.0, 21775.0], [643.0, 21797.0], [641.0, 21669.0], [640.0, 21709.0], [654.0, 21460.0], [653.0, 21106.0], [652.0, 21251.0], [651.0, 21576.0], [650.0, 21331.0], [649.0, 21654.0], [648.0, 21264.0], [663.0, 20687.0], [662.0, 20576.0], [661.0, 21150.0], [697.0, 19635.0], [702.0, 19300.5], [703.0, 19332.0], [688.0, 19802.0], [691.0, 19431.0], [690.0, 19904.0], [693.0, 19607.0], [692.0, 19963.0], [700.0, 19575.0], [699.0, 19338.0], [698.0, 19625.0], [696.0, 19736.0], [679.0, 20191.0], [678.0, 20305.0], [677.0, 19981.0], [676.0, 19997.0], [675.0, 20650.0], [674.0, 20734.0], [673.0, 20373.0], [672.0, 20846.0], [687.0, 19529.0], [686.0, 19724.0], [684.0, 20351.0], [683.0, 20264.0], [682.0, 20361.0], [681.0, 20417.0], [680.0, 20066.0], [695.0, 19920.0], [694.0, 19599.0], [733.0, 18024.0], [724.0, 18311.0], [735.0, 17864.5], [721.0, 18597.0], [720.0, 18611.0], [723.0, 18544.0], [722.0, 18251.0], [732.0, 17786.0], [731.0, 18083.5], [729.0, 18261.5], [711.0, 18712.0], [710.0, 19187.0], [709.0, 18929.0], [708.0, 19107.0], [707.0, 19088.0], [706.0, 19357.0], [705.0, 19396.0], [704.0, 19488.0], [719.0, 18467.0], [718.0, 18823.5], [716.0, 18380.0], [715.0, 19030.0], [713.0, 18839.0], [712.0, 19046.0], [727.0, 18267.0], [726.0, 18140.0], [725.0, 17874.0], [764.0, 16441.0], [767.0, 16293.0], [753.0, 16974.0], [752.0, 16876.0], [755.0, 16561.0], [754.0, 16704.0], [757.0, 16690.0], [756.0, 16836.0], [766.0, 16319.0], [765.0, 16363.0], [763.0, 16216.0], [762.0, 16472.0], [761.0, 16525.0], [760.0, 16094.0], [751.0, 16845.0], [737.0, 17832.0], [736.0, 17652.0], [739.0, 17203.0], [738.0, 17948.0], [741.0, 17386.0], [740.0, 17568.0], [743.0, 17341.0], [742.0, 17371.0], [750.0, 16646.0], [749.0, 17284.0], [748.0, 17318.0], [747.0, 17348.0], [746.0, 16916.0], [745.0, 17317.0], [744.0, 17264.0], [759.0, 16488.0], [758.0, 16232.0], [796.0, 15127.0], [799.0, 14766.0], [785.0, 15595.0], [784.0, 15007.0], [787.0, 15510.0], [786.0, 15212.0], [789.0, 15052.0], [788.0, 15479.0], [798.0, 15159.0], [797.0, 14764.0], [795.0, 15023.0], [794.0, 14994.0], [793.0, 14904.0], [792.0, 15370.0], [783.0, 15692.0], [768.0, 16058.0], [770.0, 16186.0], [769.0, 15918.0], [773.0, 15854.5], [771.0, 15603.0], [775.0, 15996.0], [774.0, 16026.0], [782.0, 15731.0], [781.0, 15390.0], [780.0, 15851.0], [779.0, 15903.0], [778.0, 15890.5], [776.0, 15885.0], [791.0, 15136.0], [790.0, 15430.0], [825.0, 13652.0], [830.0, 13650.5], [831.0, 13765.0], [816.0, 14073.0], [818.0, 13800.0], [817.0, 14154.0], [820.0, 13983.0], [819.0, 13770.0], [828.0, 13433.0], [827.0, 13910.0], [826.0, 13607.0], [824.0, 13617.5], [807.0, 14231.0], [806.0, 14138.0], [805.0, 14311.0], [804.0, 14688.0], [803.0, 14359.0], [802.0, 14248.0], [801.0, 14659.0], [800.0, 14551.0], [815.0, 13873.0], [814.0, 14250.0], [813.0, 14289.0], [812.0, 14290.0], [811.0, 13945.0], [810.0, 14077.5], [808.0, 14451.0], [822.0, 13549.0], [821.0, 13794.0], [857.0, 12700.0], [861.0, 12616.0], [862.0, 12598.0], [849.0, 13035.0], [848.0, 13135.0], [851.0, 12967.0], [850.0, 12632.0], [853.0, 12649.0], [852.0, 12918.0], [860.0, 12505.0], [859.0, 12472.0], [858.0, 12679.0], [856.0, 12189.0], [839.0, 13074.0], [838.0, 13097.0], [837.0, 13085.0], [836.0, 13037.0], [835.0, 13039.0], [834.0, 13166.5], [832.0, 13375.0], [847.0, 12997.0], [846.0, 12923.0], [845.0, 12816.0], [844.0, 12651.0], [843.0, 13241.0], [842.0, 13064.0], [841.0, 13181.0], [840.0, 13361.0], [855.0, 12489.0], [854.0, 12906.0], [892.0, 11266.0], [895.0, 11308.0], [881.0, 11580.0], [880.0, 11784.0], [883.0, 11885.0], [882.0, 11587.0], [885.0, 11328.0], [884.0, 11884.0], [894.0, 11042.0], [893.0, 11635.0], [891.0, 11676.0], [890.0, 11724.0], [889.0, 11563.0], [888.0, 11188.0], [879.0, 12053.0], [865.0, 12200.0], [864.0, 12615.0], [867.0, 12512.0], [866.0, 12118.0], [869.0, 12021.0], [868.0, 12469.0], [871.0, 12348.0], [870.0, 12394.0], [878.0, 11752.0], [877.0, 12220.0], [876.0, 11966.0], [874.0, 12038.5], [872.0, 12246.0], [887.0, 11379.0], [886.0, 11741.0], [920.0, 10420.0], [924.0, 10836.0], [927.0, 10781.0], [913.0, 11098.0], [912.0, 10787.0], [915.0, 10505.0], [914.0, 10565.0], [926.0, 10780.0], [925.0, 10816.0], [923.0, 10643.0], [922.0, 10311.0], [921.0, 10578.0], [911.0, 11006.0], [896.0, 11329.0], [898.0, 10931.0], [897.0, 11505.0], [900.0, 11488.0], [899.0, 11331.0], [902.0, 10864.0], [901.0, 11235.0], [910.0, 10850.0], [909.0, 11317.0], [908.0, 11299.0], [907.0, 11422.0], [906.0, 11072.0], [905.0, 11291.0], [904.0, 11017.0], [919.0, 10926.0], [917.0, 10890.5], [952.0, 10225.0], [957.0, 10354.0], [958.0, 10297.0], [945.0, 10626.0], [944.0, 10434.0], [956.0, 10108.0], [955.0, 10297.5], [953.0, 10444.0], [943.0, 10662.0], [929.0, 10205.0], [928.0, 10226.0], [931.0, 10739.0], [930.0, 10745.0], [934.0, 10541.5], [932.0, 10750.0], [942.0, 10623.0], [941.0, 10636.0], [940.0, 10545.0], [939.0, 10476.0], [938.0, 10432.0], [936.0, 10750.5], [951.0, 10119.0], [950.0, 10465.0], [949.0, 9926.0], [948.0, 10283.0], [947.0, 10517.0], [946.0, 10263.0], [1000.0, 9780.333333333334]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[501.4479999999999, 28934.417999999976]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 206.7, "minX": 1.70326482E12, "maxY": 3152861.283333333, "series": [{"data": [[1.70326488E12, 3152861.283333333], [1.70326482E12, 383681.0333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70326488E12, 1743.3], [1.70326482E12, 206.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70326488E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10347.11320754717, "minX": 1.70326482E12, "maxY": 31138.281879194627, "series": [{"data": [[1.70326488E12, 31138.281879194627], [1.70326482E12, 10347.11320754717]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70326488E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9838.03773584906, "minX": 1.70326482E12, "maxY": 30536.48434004477, "series": [{"data": [[1.70326488E12, 30536.48434004477], [1.70326482E12, 9838.03773584906]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70326488E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6640.273584905663, "minX": 1.70326482E12, "maxY": 7989.822147651, "series": [{"data": [[1.70326488E12, 7989.822147651], [1.70326482E12, 6640.273584905663]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70326488E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9230.0, "minX": 1.70326482E12, "maxY": 50373.0, "series": [{"data": [[1.70326488E12, 50373.0], [1.70326482E12, 11505.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70326488E12, 11042.0], [1.70326482E12, 9230.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70326488E12, 46712.6], [1.70326482E12, 11153.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70326488E12, 49872.2], [1.70326482E12, 11503.81]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70326488E12, 29142.0], [1.70326482E12, 10304.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70326488E12, 48424.4], [1.70326482E12, 11330.3]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70326488E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9603.0, "minX": 1.0, "maxY": 69327.0, "series": [{"data": [[32.0, 11884.5], [10.0, 39138.5], [11.0, 36762.0], [3.0, 37349.0], [50.0, 10784.0], [55.0, 9926.0], [1.0, 9603.0], [16.0, 16840.5], [19.0, 41855.0], [20.0, 39455.0], [21.0, 23477.0], [22.0, 30971.5], [23.0, 25871.0], [24.0, 32797.5], [25.0, 27989.0], [26.0, 26927.5], [27.0, 41928.5], [28.0, 17877.5], [30.0, 13836.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[23.0, 69327.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 55.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9581.0, "minX": 1.0, "maxY": 69327.0, "series": [{"data": [[32.0, 11315.0], [10.0, 38571.5], [11.0, 36130.0], [3.0, 36633.0], [50.0, 10205.0], [55.0, 9590.0], [1.0, 9581.0], [16.0, 16225.0], [19.0, 41070.5], [20.0, 38733.5], [21.0, 22890.5], [22.0, 30331.5], [23.0, 25247.5], [24.0, 32162.5], [25.0, 27440.0], [26.0, 26363.5], [27.0, 41230.5], [28.0, 17262.0], [30.0, 13269.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[23.0, 69327.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 55.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.70326482E12, "maxY": 16.666666666666668, "series": [{"data": [[1.70326482E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70326482E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.70326482E12, "maxY": 14.516666666666667, "series": [{"data": [[1.70326488E12, 14.516666666666667], [1.70326482E12, 1.7666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70326488E12, 0.38333333333333336]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70326488E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.70326482E12, "maxY": 14.516666666666667, "series": [{"data": [[1.70326488E12, 14.516666666666667], [1.70326482E12, 1.7666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.70326488E12, 0.38333333333333336]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70326488E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.70326482E12, "maxY": 14.516666666666667, "series": [{"data": [[1.70326488E12, 14.516666666666667], [1.70326482E12, 1.7666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70326488E12, 0.38333333333333336]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70326488E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

